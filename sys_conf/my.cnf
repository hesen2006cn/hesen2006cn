################### Main MySQL config area

# Note UPDATE section where you should make changes for each server

# History
# 2009-07-03	SM	First version release for testing
# 2009-07-03	SM	Added comments, updates
# 2009-07-08	SM	Fixed to run with John
# 2009-07-09	SM	Added update sections
# 2009-07-15	SM	Changed options to use -, as found log_error also broken
# 2009-07-18	SM	Changed INNODB to O_DIRECT for no data buffer
# 2009-08-07	VV	Changed datadir = /var/lib/mysql/data, 
# 2009-08-07	VV	Set max-binlog-size = 256M and expire_logs_days = 7



[mysqld_safe]
# Nothing here for now

[mysqld]

################################
### Connections & Networking ###
################################

# Set PID file, otherwise uses hostname

pid-file = mysql.pid

# Set skip-networking to disable networking, but if you want to lock out users, 
#  you also have to rename local unix socket 

#skip-networking

# Listen IP Address - only ONE address can be used !
# Set 127.0.0.1 for now, use 0.0.0.0 for all interfaces; 
#  NOTE: localhost here means only the pipe

# NC Only one address here, so it's either 127.0.0.1 or 0.0.0.0
#  No way to limit to only private IP; use iptables
# UPDATE

#bind-address = 127.0.0.1

# Listen port

port = 3306

# Local socket - can disble if not used locally
# Default is in mysql dir, but this may not be readable by normal user
#  for security
#  Rename to lock out users, such as mysql.lockout.sock

socket = /var/lib/mysql/mysql.sock 

# back-log is the number of connections the operating system can keep in
# the listen queue, before the MySQL connection manager thread has
# processed them. If you have a very high connection rate and experience
# "connection refused" errors, you might need to increase this value.
# Check your OS documentation for the maximum value of this parameter.
# Attempting to set back-log higher than your operating system limit
# will have no effect.  Default = 50, NC use 64 for nice round numbers

back-log = 64

# The maximum amount of concurrent sessions the MySQL server will
# allow. One of these connections will be reserved for a user with
# SUPER privileges to allow the administrator to login even if the
# connection limit has been reached.  Default = 100
# NC: Small = 50, Med = 256, Large = 1024
# UPDATE

max-connections = 256

# Maximum amount of errors allowed per host. If this limit is reached,
# the host will be blocked from connecting to the MySQL server until
# "FLUSH HOSTS" has been run or the server was restarted. Invalid
# passwords and other errors during the connect phase result in
# increasing this value. See the "Aborted-connects" status variable for
# global counter.  Default = 10

max-connect-errors = 10

# Skip DNS name lookup or else will have problems if DNS is down
# NC Must use dashes, not underscores 

skip-name-resolve

# The maximum size of a query packet the server can handle as well as
# maximum query size server can process (Important when working with
# large BLOBs).  Enlarged dynamically, for each connection.
#  Should be the same size on all servers or can have slave problems
#  NC Probably okay to use 16M since only allocated when needed, really
#   only used for very large bulk inserts and BLOBS; see net-buffer-length

max-allowed-packet = 16M

#################################################
### General Configuration
#################################################

# User to run as
#  May not be needed if started properly by script; 
#  unclear if started by root on command line during testing/troubleshooting
#  Should use service init.d script

user = mysql

# NC Don't follow sym links for security - turn on later if adding disks/partitions
#  See http://dev.mysql.com/doc/refman/5.1/en/symbolic-links-to-tables.html

skip-symbolic-links

# Make sysdate behave like now() and be the same for entire 
# Regaular sysdate() is not safe for statement binary logging
# See http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function-sysdate
# Added in 5.1.8

sysdate-is-now

# default-character-set & default-collation are deprecated/obsolete - do not use

# Set default server character set

character-set-server = utf8

# Set default server collation

collation-server = utf8_unicode_ci

# Table type which is used by default when creating new tables, if not
# specified differently during the CREATE TABLE statement.
# Note "Table type option" is deprecated, do not use

default-storage-engine = INNODB

# Timezone defaults to OS, but can be set differently 
# NC might use if OS is set to GMT

#default-time-zone = 

# Set event scheduler
# Added in 5.1.6, but behavior changed in 5.1.11 and again in 5.1.12
# See http://dev.mysql.com/doc/refman/5.1/en/events-configuration.html#events-event-scheduler-option
# Default is off
# NC Set Disabled so cannot be started at run-time

event-scheduler = DISABLED

# Dump core if crashes
# Default is TRUE

core-file 

# Set data directory to ./data so we don't have lost+found in main dir, which confuses mysql

datadir = /var/lib/mysql/data


# Debug options
# Probably requires debug build (--with-debug)
# See http://dev.mysql.com/doc/refman/5.1/en/server-options.html#option-mysqld-debug
# NC Normally off

#debug = 

### Security Items ###

# Don't allow old passowrds (is =0 really off?) - TODO - check if off in 'show variables'

old-passwords = 0

# Force secure authentication - won't allow login by users with old passwords

secure-auth	

# Don't allow user creation via GRANT without if user has no INSERT permission on mysql.usr table
#  This means users have to be directly created

safe-user-create

# Don't allow LOAD DATA LOCAL for security reasons
#  See:  http://dev.mysql.com/doc/refman/5.1/en/load-data-local.html

local-infile = 0 

# This option limits the effect of the LOAD_FILE() function and the LOAD DATA and SELECT ... INTO OUTFILE 
#  statements to work only with files in the specified directory. 
#  This option was added in MySQL 5.1.17

# secure-file-priv = path

### End Security ###

# Set the SQL mode - see http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html
#  FAQ at:  http://dev.mysql.com/doc/refman/5.0/en/faqs-sql-modes.html
#  Use SELECT @@sql-mode to see current mode
#  For now, set to strict

# TRADITIONAL - Work like most DBs and reject bad data with error
#  TRADITIONAL key mode is useful:
#   STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER. 

# Add NO_ENGINE_SUBSTITUTION (Errors if a specified storage engine is not available)
# No spaces allowed between options
# Do not change this without discussion and testing

sql-mode="TRADITIONAL,NO_ENGINE_SUBSTITUTION"

# The number of open tables for all threads. Increasing this value
#  increases the number of file descriptors that mysqld requires.
# Therefore you have to make sure to set the amount of open files
#  allowed to at least 4096 in the variable 
#  "open_files_limit" in section [mysqld_safe]
# Note table_open_cache was called table-cache in MySQL 5.1.2 and earlier. 
# Should be max-connections X # of tables in joins
# Default is 64

# Check "opened-tables" variable - If the value is very large or increases rapidly, 
# even when you have not issued many FLUSH TABLES  statements, you should increase the table cache size

# Note also:  The status variable 'Opened-tables' will also be incremented by 2 each time you create 
#  a temporary table.  Thus if you are using temporary tables, a large value in the global status varaiable
#  'Opened-tables' does not necessarily indicate that your table-cache value is too small, 
#   and increasing table-cache will not stop Opened-tables growing.

# Must be less than the OS open file limit or else get weird errors

# NC Set to 1024 for safety for now, for OS 1024 limit

table-open-cache = 1024

# The directory used by MySQL for storing temporary files. For example,
# it is used to perform disk based large sorts, as well as for internal
# and explicit temporary tables. Multiple paths here by separating them 
# by ";" - they will then be used in a round-robin fashion.
# On 5.1, can have several paths separated by ":" to spread load between disks
# NC: Default sample file uses /tmp but a subdir is better, so /tmp/mysql

# Note this directory must exist and should be owned by mysql user

tmpdir = /tmp/mysql

# The size of the cache to hold the SQL statements for the binary log
# during a transaction. If you often use big, multi-statement
# transactions you can increase this value to get more performance. All
# statements from transactions are buffered in the binary log cache and
# are being written to the binary log at once after the COMMIT.  If the
# transaction is larger than this value, temporary file on disk is used
# instead.  Deafult is 1M

# This buffer is allocated PER CONNECTION on first update statement in transaction, 
#  so don't make it too big for thousands of connections.

# %SM NC We ned better recommendations, since 1M seems way too large, and is 1G for 1000 users
#  Need to see how to monitor this, as probably create wait for log flush if too small 
#  Monitor using Binlog-cache-use and Binlog-cache-disk-use to see if big enough

binlog-cache-size = 64K

# Maximum allowed size for a single HEAP (in memory) table. This option
# is a protection against the accidential creation of a very large HEAP
# table which could otherwise use up all memory resources.

max-heap-table-size = 64M

# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY
# queries. If sorted data does not fit into the sort buffer, a disk
# based merge sort is used instead - See the "Sort-merge-passes"
# status variable. Allocated PER THREAD if sort is needed.
# Default is 2M
# NC May make smaller to save RAM, if sorts are not large
# Need to see how to monitor

sort-buffer-size = 2M

# This buffer is used for the optimization of full JOINs (JOINs without
# indexes). Such JOINs are very bad for performance in most cases
# anyway, but setting this variable to a large value reduces the
# performance impact. See the "Select-full-join" status variable for a
# count of full JOINs. Allocated PER THREAD if full join is found
# Default is 128KB
# NC Not sure why this is 8M but should help if these are used occasionally

join-buffer-size = 8M

# How many threads we should keep in a cache for reuse. When a client
# disconnects, the client's threads are put in the cache if there aren't
# more than thread-cache-size threads from before.  This greatly reduces
# the amount of thread creations needed if you have a lot of new
# connections. (Normally this doesn't give a notable performance
# improvement if you have a good thread implementation.)
# Default is 0
#  NC Set higher for PHP or others that disconnect/reconnect a lot; watch stats
#  NC Look at difference between Connections and Threads-created status vars to see cache hits/efficiency
#  NC Set to 32 for now

thread-cache-size = 32

# This permits the application to give the threads system a hint for the
# desired number of threads that should be run at the same time.  This
# value only makes sense on systems that support the thread-concurrency()
# function call (Sun Solaris, for example).
# You should try [number of CPUs]*(2..4) for thread-concurrency
# Probably not used for Linux

# Note InnoDB thread concurrency is separate, below

thread-concurrency = 8

# Query cache is used to cache SELECT results and later return them
# without actual executing the same query once again. Having the query
# cache enabled may result in significant speed improvements, if your
# have a lot of identical queries and rarely changing tables. See the
# "Qcache-lowmem-prunes" status variable to check if the current value
# is high enough for your load.

# Note: In case your tables change very often or if your queries are
# textually different every time, the query cache may result in a
# slowdown instead of a performance improvement.

query-cache-size = 64M

# Only cache result sets that are smaller than this limit. This is to
# protect the query cache of a very large result set overwriting all
# other query results.

query-cache-limit = 2M

# If your system supports the memlock() function call, you might want to
# enable this option while running MySQL to keep it locked in memory and
# to avoid potential swapping out in case of high memory pressure. Good
# for performance.  

# NC Requires server to run as root, which is not good, so disabled

#memlock

# Thread stack size to use. This amount of memory is always reserved at
# connection time. MySQL itself usually needs no more than 64K of
# memory, while if you use your own stack hungry UDF functions or your
# OS requires more stack for some operations, you might need to set this
# to a higher value.

# NC might be able to reduce to 64K if testing, as saves 128M RAM for 1K users

thread-stack = 192K

# Network buffer allocated for each new thread - PER THREAD
# The connection buffer and result buffer both begin with a size given by 
# net-buffer-length but are dynamically enlarged up to max-allowed-packet bytes as needed.
# The result buffer shrinks to net-buffer-length after each SQL statement. 

# Default is 16K

net-buffer-length = 16K

# Set the default transaction isolation level. Levels available are:
# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
# Dash is required, not underscore

# NC Do not change this without discussion

#transaction-isolation = REPEATABLE-READ

transaction-isolation = READ-COMMITTED


# Maximum size for internal (in-memory) temporary tables. If a table
# grows larger than this value, it is automatically converted to disk
# based table This limitation is for a single table. There can be many
# of them.

# NC May have to make smaller, have to monitor, make smaller until 
#  we see lots of disk tmp tables

tmp-table-size = 64M

#################################################
### Logging Section
#################################################

# Enable the full query log. Every query (even ones with incorrect
# syntax) that the server receives will be logged. This is useful for
# debugging, it is usually disabled in production use.
# Default is OFF
# See http://dev.mysql.com/doc/refman/5.1/en/server-options.html#option-mysqld-log

# NC Don't turn on if server is busy, as will slow down and create huge logs
#  but useful for simple testing

# Specify the initial general query log state. 
# Default is OFF
# NC After 5.1.29 can use general-log option and specify file name, but for now
#  use log for compatibility

#general-log = query.log

# NC After 5.1.29 can use general-log option and specify file name, but for now
#  use log for compatibility

#log 

# Log errors
# Note FLUSH LOGS will rename this file to -old, and start new file 
#  Not sure what happens on second FLUSH
# NC Default name is host name, so set to error.log

log-error = error.log

# From 5.1.21 and later, can add a syslog tag

# NC Not supported, even in 5.1.33, so off for now
#syslog-tag = mysql

# Print warnings to the error log file.  If you have any problem with
# MySQL you should enable logging of warnings and examine the error log
# for possible explanations. 
# Includes print out warnings such as Aborted connection...
# Default is 1

log-warnings = 1

# Log slow queries. Slow queries are queries which take more than the
# amount of time defined in "long-query-time" or which do not use
# indexes well, if log-long-format is enabled. It is normally good idea
# to have this turned on if you frequently add new queries to the
# system.

# NC In the future --slow-query-log and --slow-query-log-file=file-name will be used
# enabled in 5.1.29 but don't use now for compatibility

# Need to updat this for MySQL 5.1 table logs

slow-query-log
slow-query-log-file = slow.log

# Only use in < 5.1.29
#log-slow-queries = slow.log

# Log slow administrative statements such as OPTIMIZE TABLE, ANALYZE TABLE, 
# and ALTER TABLE to the slow query log. 

#log-slow-admin-statements

# All queries taking more than this amount of time (in seconds) will be
# trated as slow. Do not use "1" as a value here, as this will result in
# even very fast queries being logged from time to time (as MySQL
# currently measures time with second accuracy only).

# DO NOT USE 1 for this

# Can use ms with special patch from Percona

long-query-time = 2

# When this option is set, queries which examine fewer than number rows are not 
# written to the slow query log. The default is 0.
# This option was introduced in MySQL 5.1.21. 
# NC no need to use for now

#min-examined-row-limit = 0

# Log more information in the slow query log. Normally it is good to
# NC This is obsolete and should not be used, as it's the default format now

#log-long-format (don't use)

# This will enable logging of queries that are not
# using indexes in addition to long running queries.

# NC Note this can create large logs if there are logs of no-index queries 
#  These are very common for small tables

log-queries-not-using-indexes = FALSE

# This option selects log output destinations, but does not enable log output. 
# Use Log/General Log and Slow Log options to turn on the logs

# This option determines the destination for general query log and slow query log output. 
# The option value can be given as one or more of the words TABLE, FILE, or NONE. 
# If the option is given without a value, the default is FILE. (For MySQL 5.1.6 through 5.1.20, 
# the default is TABLE.) TABLE  select logging to the general-log and slow-log tables in 
# the mysql database as a destination. FILE selects logging to log files as a destination. 
# NONE disables logging. If NONE is present in the option value, it takes precedence over 
# any other words that are present. TABLE and FILE can both be given to select to both log output destinations. 

# Added in 5.1.6 - if you upgrade from before 5.1.6, you must create the log tables

# See http://dev.mysql.com/doc/refman/5.1/en/log-tables.html

# NC Set to FILE for ease of use, can use TABLE and TABLE, FILE if needed

log-output = FILE

# From 5.1.20 and later, can log errors to syslog
# If both log-error and syslog are used, log-error is used
# NC Not used for now - need to make sure this option can be used, not just for mysql-safe

#syslog

###########################################
### BinLog, Index & Replication Options ###
###########################################

# NC Always set server different ID in master-slave config; default is 1, but don't use that
# UPDATE

server-id = 10

# Always name binlog (log-bin) and all other log/info files
#  Used for replication and point-in-time recovery
# Required for master.  Should also be set on at Slave.
# Note that an extension is not allowed, and if supplied, is ignored	

# Note that in MySQL 5.1.18 through 5.1.22, there were bugs in paths in these variables
#  They were seen as absolute, not relative

# NC Do not turn off without discussion

log-bin = mysql-bin 

# This variable sets the binary logging format, and can be any one of STATEMENT, ROW, or MIXED
# Added in 5.1.5
# NC The default changes for various versions of 5.1, so should set this
#  Default used to be STATEMENT, but (>= 5.1.12, <= 5.1.28) was MIXED

binlog-format = MIXED

# Set max log size
# If a write to the binary log causes the current log file size to exceed the value of this variable, 
#  the server rotates the binary logs (closes the current file and opens the next one). 
#  You cannot set this variable to more than 1GB or to less than 4096 bytes. The default value is 1GB. 

max-binlog-size = 256M

# Set binlog index file name - otherwise will us host name

log-bin-index = mysql-bin.index

# Set master.info file name - otherwise will us host name

master-info-file = master.info

# Set period after which we purge the binlogs
# currently set to 7 days - otherwise will be unlimited
# Can be reduced for R/O slaves to 1 day only

expire_logs_days = 7

# Set Relay Log name in config - otherwise will us host name

relay-log = relay-bin

# Set Relay Log Index file name - otherwise will us host name

relay-log-index = relay-bin.index

# Set Relay Log Info file name - otherwise will us host name

relay-log-info-file = relay-log.info

# If max-relay-log-size is 0, the value of max-binlog-size applies to relay logs as well. 
# NC Normally don't set; defaults to 0 though some docs say defaults to 1G

# max-relay-log-size = 0

# Set sync-binlog = 1 to fsync() the binlog at commit for Master
#  Can be off on Slave for performance
# NC Do not change this without discussion

sync-binlog = 1

# If you're using replication with chained slaves (A->B->C), you need to
# enable this option on server B. It enables logging of updates done by
# the slave thread into the slave's binary log. 
# NC Always a good idea for using slave's logs to recover master or recover slave to point in time
# NC Always a good idea for master-master role change

log-slave-updates

# Set master - never do it in config file.  Use Change Master To command:

#    CHANGE MASTER TO MASTER-HOST=<host>, MASTER-PORT=<port>,
#    MASTER-USER=<user>, MASTER-PASSWORD=<password> ;
#
#    where you replace <host>, <user>, <password> by quoted strings and
#    <port> by the master's port number (3306 by default).
#
#    Example:
#
#    CHANGE MASTER TO MASTER-HOST='125.564.12.1', MASTER-PORT=3306,
#    MASTER-USER='joe', MASTER-PASSWORD='secret';

#####################
### SLAVE SECTION ###
#####################

# The host name or IP number of the slave to be reported to the master during slave registration.
# This value appears in the output of SHOW SLAVE HOSTS on the master server. Leave the value 
# unset if you do not want the slave to register itself with the master.

# NC Should update with real hostname when setting up slave
# UPDATE (if a slave)

#report-host = hostname

# Use slave-compressed-protocol on slow servers - set on both master and slave

#slave-compressed-protocol

# Make the slave read-only. Only users with the SUPER privilege and the
# replication slave thread will be able to modify data on it. You can
# use this to ensure that no applications will accidently modify data on
# the slave instead of the master

#read-only

# Normally, don't start slave processes to allow recovery
#  And don't start on Master of Master - Master system
#  Have to always start manually when restarting server, but safer for slave data

skip-slave-start

# The number of events from the master that a slave server should skip. 
# If skipping the number of events specified by setting this variable would cause the 
#  slave to begin in the middle of an event group, the slave continues to skip until it 
#  finds the beginning of the next event group and begins from that point. See 

# NC Only for special slave recovery

#sql-slave-skip-counter

# Controls whether IDEMPOTENT or STRICT mode is used in replication conflict resolution and 
#  error checking. IDEMPOTENT  mode causes suppression of duplicate-key and no-key-found errors. 
#  Beginning with MySQL 5.1.23-ndb-6.2.14 and MySQL 5.1.24, this mode should be employed in 
#  multi-master replication, circular replication, and some other special replication scenarios.
#  STRICT mode is the default, and is suitable for most other cases. 
# NC Use STRICT, even for standard master-master

slave-exec-mode = STRICT

# The number of seconds to wait for more data from a master/slave connection before 
#  aborting the read. This timeout applies only to TCP/IP connections, not to 
#  connections made via Unix socket files, named pipes, or shared memory. 
# The interval between retries is controlled by the MASTER-CONNECT-RETRY  option for the 
#  CHANGE MASTER TO  statement or --master-connect-retry option, and the number of 
#  reconnection attempts is limited by the --master-retry-count option.
# Default 3600 (1 hour)

slave-net-timeout = 3600

# When the slow query log is enabled, this option enables logging for queries that 
# have taken more than long-query-time seconds to execute on the slave.
# This option was added in MySQL 5.1.21. 

log-slow-slave-statements = 0

###########################
### MyISAM Section
###########################

# Never set delay-key-writes unless you understand the corruption issues and 
#  ALWAYS have to check tables/indexes after crash
# Set to OFF to ignore what's used in table create statements
# Default is on

delay-key-write = off

# Size of the Key Buffer, used to cache index blocks for MyISAM tables.
# Do not set it larger than 30% of your available memory, as some memory
# is also required by the OS to cache rows. Even if you're not using
# MyISAM tables, you should still set it to 8-64M as it will also be
# used for internal temporary disk tables.
# NC This is for indexes, NOT for data - Data is cached by OS, so leave RAM free
# UPDATE

key-buffer-size = 64M

# Size of the buffer used for doing full table scans of MyISAM tables.
# Allocated per thread, if a full scan is needed.
# Default is 128K
# NC set to 256K to give a bit larger size

read-buffer-size = 256K

# When reading rows in sorted order after a sort, the rows are read
# through this buffer to avoid disk seeks. You can improve ORDER BY
# performance a lot, if set this to a high value.
# Allocated per thread, when needed.
# Default is 256K
# NC Set to 1M to get performance gain, need to see how to monitor

read-rnd-buffer-size = 1M

# MyISAM uses special tree-like cache to make bulk inserts (that is,
# INSERT ... SELECT, INSERT ... VALUES (...), (...), ..., and LOAD DATA
# INFILE) faster. This variable limits the size of the cache tree in
# bytes per thread. Setting it to 0 will disable this optimisation.  Do
# not set it larger than "key-buffer-size" for optimal performance.
# This buffer is allocated when a bulk insert is detected.

# NC Set to match key buffer; don't set larger than key buffer

bulk-insert-buffer-size = 64M

# This buffer is allocated when MySQL needs to rebuild the index in
# REPAIR, OPTIMIZE, ALTER table statements as well as in LOAD DATA INFILE
# into an empty table. It is allocated per thread so be careful with
# large settings (%SM but only for recovery statements?)
# Default is 8M
# Set large for recovery performance
# NC Set much larger to have space

myisam-sort-buffer-size = 128M

# The maximum size of the temporary file MySQL is allowed to use while
# recreating the index (during REPAIR, ALTER TABLE or LOAD DATA INFILE.
# If the file-size would be bigger than this, the index will be created
# through the key cache (which is slower).
# Set large for recovery performance

# NC Have to watch space available on small disks, so set 1G for now

myisam-max-sort-file-size = 1G

# If the temporary file used for fast index creation would be bigger
# than using the key cache by the amount specified here, then prefer the
# key cache method.  This is mainly used to force long character keys in
# large tables to use the slower key cache method to create the index.

myisam-max-extra-sort-file-size = 1G

# If a table has more than one index, MyISAM can use more than one
# thread to repair them by sorting in parallel. This makes sense if you
# have multiple CPUs and plenty of memory.
# NC Set to 4 to use lots of cores, maybe lower on small VMs

myisam-repair-threads = 4

# Automatically check and repair not properly closed MyISAM tables.
#  QUICK,BACKUP to make the server check for tables that weren't properly closed, 
#   make a backup copy, and then do a quick recover. 
#  If you want to be able to recover from most problems without user intervention, 
#   you should use the options BACKUP,FORCE. 
#   This forces a repair of a table even if some rows would be deleted, 
#   but it keeps the old data file as a backup so that you can later examine what happened. 

# If recovery is enabled, each time mysqld opens a MyISAM  table, it checks whether 
# the table is marked as crashed or wasn't closed properly. (The last option works 
# only if you are running with external locking disabled.) If this is the case, 
# mysqld runs a check on the table. If the table was corrupted, mysqld attempts to repair it. 

# DEFAULT Recovery without backup, forcing, or quick checking.
# BACKUP If the data file was changed during recovery, save a backup of the 
# tbl-name.MYD file as tbl-name-datetime.BAK.
# FORCE Run recovery even if we would lose more than one row from the .MYD file.
# QUICK Don't check the rows in the table if there aren't any delete blocks.

# Before the server automatically repairs a table, it writes a note about the repair 
# to the error log.

# NC Needs more research since rows will be deleted, though still have copy

myisam-recover = BACKUP,FORCE

# Give table-modifying operations (INSERT, REPLACE, DELETE, UPDATE) lower priority than selects.
# This can also be done via {INSERT | REPLACE | DELETE | UPDATE} LOW-PRIORITY ... to lower the 
# priority of only one query, or by SET LOW-PRIORITY-UPDATES=1 to change the priority in one 
# thread. This affects only storage engines that use only table-level 
# locking (MyISAM, MEMORY, MERGE). See Section 7.3.2, �Table Locking Issues�. 

# NC Only used on slaves for high peformance, only if using MyISAM 
# NC This is turned on by ANY entry here, so "= 0" will turn it on, so comment out for off 

#low-priority-updates 

# Use memory mapping for reading and writing MyISAM tables. 
# This variable was added in MySQL 5.1.4. 
# Before MySQL 5.1.4, only compressed MyISAM tables are memory mapped.
# Deafult is FALSE
# NC Leave off for now - needs research

myisam-use-mmap = 0

###########################
### INNODB Section
###########################

# Enable InnoDB (can be ON, OFF, FORCED [>= 5.1.36])
# NC Gets errors for ON, even on 5.1.33, so off for now

#innodb = ON

# Use this option if you have a MySQL server with InnoDB support enabled
# but you do not plan to use it. This will save memory and disk space
# and speed up some things.
# NC Probably use innodb = OFF (above) to turn innodb off

#skip-innodb

# Set this option if you would like the InnoDB tablespace files to be
# stored in another location. By default this is the MySQL datadir.
# Must have final / as this must be a directory
# Default is ./

#innodb-data-home-dir = <directory>/

# InnoDB stores data in one or more data files forming the tablespace.
# If you have a single logical drive for your data, a single
# autoextending file would be good enough. In other cases, a single file
# per device is often a good choice. You can configure InnoDB to use raw
# disk partitions as well - please refer to the manual for more info
# about this.
# Default is ibdata1:10M:autoextend

# Note autoextend increment defaults to 8MB, can be set via innodb-autoextend-increment

# NC For a DBA-managed server, don't use autoextend, but normally ok
#  Especially since file per table option will reduce size of ibdatax
# NC Note we added Maximum size option
# NC It seems you cannot change this after the file is created, so much match actual file on server
#  so may need to update when using this config on existing server
# UPDATE if needed to match existing files

innodb-data-file-path = ibdata1:10M:autoextend:max:500M

# Set table per file to help space management
#  To move table to a file, use ALTER TABLE <table> ENGINE=InnoDB
#  For query to build list, use SELECT CONCAT ('alter table ', 
#  TABLE-SCHEMA ,'.',table-name,' ENGINE=InnoDB;') 
#   FROM INFORMATION-SCHEMA.tables
#   where table-type='BASE TABLE' and engine = 'InnoDB'
#  Or mysqlcheck --optimize --all-databases

innodb-file-per-table = 1

# Controls whether InnoDB creates a file named innodb-status.<pid>  in the MySQL data directory. 
# If enabled, InnoDB periodically writes the output of SHOW ENGINE INNODB STATUS to this file. 

innodb-status-file = 1

# Main InnoDB memory usage
# InnoDB, unlike MyISAM, uses a buffer pool to cache both indexes and
# row data. The bigger you set this the less disk I/O is needed to
# access data in tables. On a dedicated database server you may set this
# parameter up to 80% of the machine physical memory size. Do not set it
# too large, though, because competition of the physical memory may
# cause paging in the operating system.  Note that on 32bit systems you
# might be limited to 2-3.5G of user level memory per process, so do not
# set it too high.
# NC Set to use most of RAM on server (<80%)
# UPDATE

innodb-buffer-pool-size = 128M

# Additional memory pool that is used by InnoDB to store metadata
# information.  If InnoDB requires more memory for this purpose it will
# start to allocate it from the OS.  As this is fast enough on most
# recent operating systems, you normally do not need to change this
# value. SHOW INNODB STATUS will display the current amount used.
# Default is 1M
# NC Should monitor

innodb-additional-mem-pool-size = 8M

# Number of IO threads to use for async IO operations. This value is
# hardcoded to 4 on Unix, but on Windows disk I/O may benefit from a
# larger number.
# Do not change

innodb-file-io-threads = 4

# Number of threads allowed inside the InnoDB kernel. The optimal value
# depends highly on the application, hardware as well as the OS
# scheduler properties. A too high value may lead to thread thrashing.

# NC Generally set to 2xCores or less + the # of disks, so 8-10 for a 4 core system

innodb-thread-concurrency = 8

# If set to 1, InnoDB will flush (fsync) the transaction logs to the
# disk at each commit, which offers full ACID behavior. If you are
# willing to compromise this safety, and you are running small
# transactions, you may set this to 0 or 2 to reduce disk I/O to the
# logs. Value 0 means that the log is only written to the log file and
# the log file flushed to disk approximately once per second. Value 2
# means the log is written to the log file at each commit, but the log
# file is only flushed to disk approximately once per second.
# (<>1 can cause corruption, though can be used on Slaves if they can be rebuilt)

# NC ALWAYS set to 1 for real systems or else get corruption
# NC Do not change this

innodb-flush-log-at-trx-commit = 1

# If you run into InnoDB tablespace corruption, setting this to a nonzero
# value will likely help you to dump your tables. Start from value 1 and
# increase it until you're able to dump the table successfully.
# NC Do not change this

innodb-force-recovery = 0

# Speed up InnoDB shutdown. This will disable InnoDB to do a full purge
# and insert buffer merge on shutdown. It may increase shutdown time a
# lot, but InnoDB will have to do it on the next startup instead.

# Is on by default, set to 1; only need 0 for full flushing

# NC Set to 0 for now, to force full safe flush on shutdown
# NC But can use 1 for faster shutdowns if needed

innodb-fast-shutdown = 0

# The size of the buffer InnoDB uses for buffering log data. As soon as
# it is full, InnoDB will have to flush it to disk. As it is flushed
# once per second anyway, it does not make sense to have it very large
# (even with long transactions). 
# Default is 1M, max reasonable is 8M
# NC Can be bigger on larger, faster systems as we don't want to wait

innodb-log-buffer-size = 8M

# Size of each log file in a log group. You should set the combined size
# of log files to about 25%-100% of your buffer pool size to avoid
# unneeded buffer pool flush activity on log file overwrite. However,
# note that a larger logfile size will increase the time needed for the
# recovery process.
# These are the ib-log-file001, ib-log-file002, etc. files
# Max TOTAL size is 4GB for all log files, so:
#  innodb-log-file-size x innodb-log-files-in-group < 4GB

# NC This must match actual log size or you'll get errors

innodb-log-file-size = 256M

# Total number of files in the log group. A value of 2-3 is usually good
# enough.
# Default is 2

# NC If server already has 2 then this has to match the current config
#  Otherwise, you get weird mistmatch errors on start, such as:
#   Error: log file ./ib-logfile2 is of different size 0 0 bytes

innodb-log-files-in-group = 2

# Location of the InnoDB log files. Default is the MySQL datadir. You
# may wish to point it to a dedicated hard drive or a RAID1 volume for
# improved performance
# NC Not normally used

#innodb-log-group-home-dir

# Maximum allowed percentage of dirty pages in the InnoDB buffer pool.
# If it is reached, InnoDB will start flushing them out agressively to
# not run out of clean pages at all. This is a soft limit, not
# guaranteed to be held.

innodb-max-dirty-pages-pct = 90

# The flush method InnoDB will use for Log. The tablespace always uses
# doublewrite flush logic. The default value is "fdatasync", another
# option is "O_DSYNC", another is "O_DIRECT".

# O_DSYNC (DirectIO for logs) is okay on Linux, and bypasses the file system cache
# O_DIRECT (DirectoIO for data) is best on Linux, bypases file system cache
#  Default is fdataasync which uses OS buffers, wasting RAM

# NC Use O-DIRECT for Linux, which will not use OS buffers for DATA, logs still use normal IO - monitor OS buffers,
#  which should be small and mostly empty

innodb-flush-method = O_DIRECT

# How long an InnoDB transaction should wait for a lock to be granted
# before being rolled back. InnoDB automatically detects transaction
# deadlocks in its own lock table and rolls back the transaction. If you
# use the LOCK TABLES command, or other transaction-safe storage engines
# than InnoDB in the same transaction, then a deadlock may arise which
# InnoDB cannot notice. In cases like this the timeout is useful to
# resolve the situation.
# Default is 50 seconds

innodb-lock-wait-timeout = 50

# For log safety on INNODB in 5.x

# Even with sync-binlog  set to 1, there is still the chance of an inconsistency 
# between the table content and binary log content in case of a crash. For example, 
# if you are using InnoDB tables and the MySQL server processes a COMMIT  statement, 
# it writes the whole transaction to the binary log and then commits this transaction 
# into InnoDB. If the server crashes between those two operations, the transaction is 
# rolled back by InnoDB at restart but still exists in the binary log. To resolve this, 
# you should set --innodb-support-xa to 1. Although this option is related to the support 
# of XA transactions in InnoDB, it also ensures that the binary log and InnoDB data 
# files are synchronized. 

# Having innodb-support-xa  enabled on a replication master � or on any MySQL server where binary logging is in use 
#  ensures that the binary log does not get out of sync compared to the table data. See above comment for why/how.

innodb-support-xa = 1

# In MySQL 5.1, InnoDB rolls back only the last statement on a transaction timeout 
# by default. If --innodb-rollback-on-timeout is specified, a transaction timeout 
# causes InnoDB to abort and roll back the entire transaction (the same behavior 
# as in MySQL 4.1). This variable was added in MySQL 5.1.15. 

# NC Seems better to have this on and roll whole transaction back

innodb-rollback-on-timeout = 1

##########  End of DB Server Config ##########

#################################################
#################################################
### Other clients, mysqlq, dump, etc. section ###
#################################################
#################################################

#Not sure how to set
[mysqldump]
quick
max-allowed-packet = 16M

[isamchk]
key-buffer = 256M
sort-buffer-size = 256M
read-buffer = 2M
write-buffer = 2M

[myisamchk]
key-buffer = 256M
sort-buffer-size = 256M
read-buffer = 2M
write-buffer = 2M

# Should only use client section on server if will connect using MySQL's Linux user
[client]
default-character-set=gbk
# Never set PW here unless needed for scripts and only if file is carefully protected - better to use /home/user/my.conf
# Use password keyword here to force prompt of password

password
port		= 3306
socket		= /var/lib/mysql/mysql.sock 

[TODO/CHECK]

#ft-min-word-len = 4 - Only for searching

#Turn off Federation

